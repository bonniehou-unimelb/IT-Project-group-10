# Generated by Django 5.2.5 on 2025-09-17 08:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("STUDENT", "Student"),
                            ("STAFF", "Staff"),
                            ("COORDINATOR", "Coordinator"),
                            ("ADMIN", "Admin"),
                        ],
                        default="STUDENT",
                        max_length=20,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AIUseScale",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("N", "Level N"),
                            ("R1", "Level R1"),
                            ("R2", "Level R2"),
                            ("G", "Level G"),
                        ],
                        max_length=3,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=120)),
                ("instructions", models.TextField(blank=True)),
                ("acknowledgement_required", models.BooleanField(default=False)),
                ("acknowledgement_text", models.TextField(blank=True)),
                ("acknowledgement_url", models.URLField(blank=True)),
                ("position", models.PositiveSmallIntegerField(default=0)),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Optional hex (e.g., #FF6B6B)",
                        max_length=7,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "AI Use Scale",
                "verbose_name_plural": "AI Use Scales",
                "ordering": ["position", "code"],
                "indexes": [
                    models.Index(fields=["code"], name="ai_scale_ap_code_15d343_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("subjectCode", models.CharField(max_length=10, unique=True)),
                ("semester", models.PositiveSmallIntegerField()),
                ("year", models.PositiveSmallIntegerField()),
                (
                    "coordinatorId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=120)),
                ("scope", models.CharField(blank=True, max_length=120, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("version", models.PositiveSmallIntegerField(default=0)),
                (
                    "isPublishable",
                    models.BooleanField(blank=True, default=True, null=True),
                ),
                (
                    "isTemplate",
                    models.BooleanField(blank=True, default=True, null=True),
                ),
                (
                    "ownerId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.subject",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AcknowledgementForm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=120)),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.subject",
                    ),
                ),
                (
                    "templateId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.template",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TemplateItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task", models.TextField()),
                ("instructionsToStudents", models.TextField(blank=True, null=True)),
                ("examples", models.TextField(blank=True, null=True)),
                ("aiGeneratedContent", models.TextField(blank=True, null=True)),
                ("useAcknowledgement", models.BooleanField(default=False)),
                (
                    "aiUseScaleLevel",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_scale_app.aiusescale",
                    ),
                ),
                (
                    "templateId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.template",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TemplateOwnership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ownerId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "templateId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.template",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AcknowledgementFormItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aiToolsUsed", models.TextField(blank=True, null=True)),
                ("purposeUsage", models.TextField(blank=True, null=True)),
                ("keyPromptsUsed", models.TextField(blank=True, null=True)),
                (
                    "ackFormId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.acknowledgementform",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["ackFormId"], name="ai_scale_ap_ackForm_00ee28_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Enrolment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "studentId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subjectId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_scale_app.subject",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["subjectId"], name="ai_scale_ap_subject_3db4f5_idx"
                    ),
                    models.Index(
                        fields=["studentId"], name="ai_scale_ap_student_c6c36c_idx"
                    ),
                ],
                "unique_together": {("subjectId", "studentId")},
            },
        ),
        migrations.AddIndex(
            model_name="template",
            index=models.Index(
                fields=["ownerId", "name", "version"],
                name="ai_scale_ap_ownerId_14045d_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="template",
            unique_together={("ownerId", "name", "version")},
        ),
        migrations.AddIndex(
            model_name="acknowledgementform",
            index=models.Index(
                fields=["templateId", "name"], name="ai_scale_ap_templat_8a53c8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="acknowledgementform",
            unique_together={("templateId", "name")},
        ),
        migrations.AddIndex(
            model_name="templateitem",
            index=models.Index(
                fields=["templateId"], name="ai_scale_ap_templat_eb5a5e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="templateownership",
            index=models.Index(
                fields=["ownerId"], name="ai_scale_ap_ownerId_a8e2fa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="templateownership",
            index=models.Index(
                fields=["templateId"], name="ai_scale_ap_templat_7c5a83_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="templateownership",
            unique_together={("templateId", "ownerId")},
        ),
    ]
