// Page that displays the personal templates of the user

"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { SideBar } from '../components/sidebar';
import { TopBar } from '../components/topbar';
import { SearchBar } from '../components/searchbar';
import { useAuth } from "../authentication/auth";
import React from "react";

const API_BACKEND_URL = "http://localhost:8000";

export type TemplateSummary = {
  templateId: number;
  name: string;
  version: number;
  subjectCode: string;
  year: number;
  semester: number;
  ownerName: string;
  isPublishable: boolean; // A table is publishable if it can be duplicated by other users of the system  
  isTemplate: boolean;    // A template is a table that is initially created by the system admin
};

type TemplateRow = {
  templateId: number;
  name: string;
  subjectCode?: string | null;
  year?: number | null;
  semester?: number | null;
  ownerId?: number | string | null;
  version: number;
  isPublishable?: boolean;
  ownerName?: string;
};

// CSRF Cookie management 
// Cookie getters generated by ChatGPT
function getCookie(name: string) {
  if (typeof document === "undefined") return null;
  const m = document.cookie.match(new RegExp(`(^|; )${name}=([^;]*)`));
  return m ? decodeURIComponent(m[2]) : null;
}
async function ensureCsrf(): Promise<string | null> {
  let token = getCookie("csrftoken");
  if (!token) {
    const res = await fetch(`${API_BACKEND_URL}/token/`, { credentials: "include" });
    try {
      const body = await res.json();
      token = body?.csrfToken || getCookie("csrftoken");
    } catch {;}
  }
  return token;
}

export default function Dashboard() {
  const router = useRouter();
  const { user, pageLoading, refresh } = useAuth();
  const [templateSum, setTemplateSum] = useState<TemplateSummary[]>([]);
  const [username, setUsername] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>("");
  const [isCreating, setIsCreating] = useState(false);
  const layout = "mx-auto w-full max-w-[1280px] px-6 md:px-8";
  const [query, setQuery] = useState<string>("");
  const [booted, setBooted] = useState(false);
  const [deletingIds, setDeletingIds] = useState<Set<number>>(new Set());

  // Single refresh to wait for cookie session 
  useEffect(() => {
    (async () => {
      try { await refresh?.(); } finally { setBooted(true); }
    })();
  }, []);

  // Reroute to log in page if user session invalid
  useEffect(() => {
    if (!booted) return;
    if (pageLoading) return;
    const t = setTimeout(() => {
      if (!user) router.replace("/login");
    }, 120); 
    return () => clearTimeout(t);
  }, [booted, pageLoading, user, router]);
  
  useEffect(() => {
    if (user?.username) setUsername(user.username);
  }, [user]);
  
  
  const handleRowClick = (template_id: number) => {
    router.push(`/?template_id=${template_id}`);
  };
  
  // Fetch cookie for user session
  useEffect(() => {
    if (!user) return;
    fetch(`${API_BACKEND_URL}/token/`, { credentials: "include" })
      .catch(() => {;});
  }, [user]);
  
  // Fetch summary details of the templates the current user owns
  useEffect(() => {
    if (!booted || pageLoading || !user?.username) return;
    (async () => {
      try {
        setLoading(true);
        setError("");
        const res = await fetch(
          `${API_BACKEND_URL}/template/summary/?username=${encodeURIComponent(user.username)}`,
          { method: "GET", credentials: "include", cache: "no-store" }
        );
        const data = (await res.json()) as { templates: TemplateSummary[] };
        setTemplateSum(data.templates || []);
      } catch {
        setError("Failed to load dashboard information");
      } finally {
        setLoading(false);
      }
    })();
  }, [booted, pageLoading, user]);
    
  const filtered = query.trim()
    ? templateSum.filter((t) =>
        [t.name, t.subjectCode, t.ownerName]
          .filter(Boolean)
          .some((s) => s.toLowerCase().includes(query.toLowerCase()))
      )
    : templateSum;
  
  type NormalizedRow = {
    templateId: number;
    name: string;
    subjectCode: string;
    year: number;
    semester: number;
    ownerKey: string;  
    ownerName: string;
    version: number;
    isPublishable: boolean;
  };

  const normalized: NormalizedRow[] = React.useMemo(() => {
    return filtered.map((t) => ({
      templateId: t.templateId,
      name: (t.name ?? "").trim(),
      subjectCode: (t.subjectCode ?? "").trim().toUpperCase(),
      year: t.year ?? 0,
      semester: t.semester ?? 0,
      ownerKey: (t.ownerName ?? "").trim().toLowerCase(),
      ownerName: t.ownerName ?? "NA",
      version: t.version ?? 0,
      isPublishable: !!t.isPublishable,
    }));
  }, [filtered]);

  const lineageKey = (r: NormalizedRow) =>
  [
    r.ownerKey,
    r.name.toLowerCase(),
    r.subjectCode.toUpperCase(),
    r.year,
    r.semester,
  ].join("|");

  function pickLatestPerLineage(rows: NormalizedRow[]): NormalizedRow[] {
    const byKey = new Map<string, NormalizedRow>();
    for (const r of rows) {
      const k = lineageKey(r);
      const prev = byKey.get(k);
      if (!prev || r.version > prev.version || (r.version === prev.version && r.templateId > prev.templateId)) {
        byKey.set(k, r);
      }
    }
    return Array.from(byKey.values()).sort((a, b) => {
      const an = a.name.toLowerCase();
      const bn = b.name.toLowerCase();
      if (an !== bn) return an.localeCompare(bn);
      return b.version - a.version;
    });
  }

  const latest = React.useMemo(() => pickLatestPerLineage(normalized), [normalized]);


  const handleDelete = async (templateId: number) => {
    if (!confirm("Delete this template? This cannot be undone.")) return;
    try {
      setDeletingIds((s) => new Set(s).add(templateId));
      const csrftoken = await ensureCsrf();
      const res = await fetch(`${API_BACKEND_URL}/template/delete/`, {
        method: "POST",
        credentials: "include",
        cache: "no-store",
        headers: {
          "Content-Type": "application/json",
          ...(csrftoken ? { "X-CSRFToken": csrftoken, "X-Requested-With": "XMLHttpRequest" } : {}),
        },
        body: JSON.stringify({ templateId }),
      });
      const txt = await res.text();
      if (!res.ok) {
        let msg = "Failed to delete template";
        try { msg = JSON.parse(txt)?.error || msg; } catch {}
        throw new Error(msg);
      }
      // remove from list
      setTemplateSum((prev) => prev.filter((t) => t.templateId !== templateId));
    } catch (e:any) {
      alert(e?.message || "Delete failed");
    } finally {
      setDeletingIds((s) => {
        const n = new Set(s);
        n.delete(templateId);
        return n;
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      
      <div className="flex min-h-screen"> 
        {/* Render the side bar */}
        <SideBar />

        <div className="flex-1 flex flex-col">
          {/* Render the top bar */}
          <TopBar pageName="My Templates"/>

          <main className={`${layout} py-5`}>
            <div className="pt-6">
              
              {/* Button that creates a new blank template using the base in the system */}
              <button
                type="button"
                className="px-4 py-2 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 shadow"
                onClick={() => {
                  if (!user || isCreating) return;
                  router.push("/templatebuilder?mode=new");
                }}
                disabled={!user || isCreating}
              >
                + Create New AI Use Scale
              </button>
            </div>

            <p className="pt-7 text-xl">Or edit an existing template:</p>

            {/* Search Bar */}
            <div className="pt-3">
              <SearchBar
                value={query}
                onChange={setQuery}
                placeholder="Search by name, subject code, or owner…"
              />
            </div>

            {/* While loading up the table, display interim loading text */}
            {loading && (
              <div className="mt-4 p-3 rounded-md bg-blue-50 border border-blue-200 text-blue-900">
                Loading…
              </div>
            )}
            {/* If we run into an error when displaying the table, display an error message */}
            {error && (
              <div className="mt-4 p-3 rounded-md bg-red-50 border border-red-200 text-red-900">
                {error}
              </div>
            )}

            {/* Table of all the user's templates that they have created */}
            
            <div className="mt-4 overflow-x-auto rounded-lg border border-gray-200 bg-white">
              <table className="max-w table-auto text-sm">
                <thead className="bg-gray-50">
                  <tr className="text-left text-gray-700">
                    <th className="px-4 py-3 font-medium w-[24rem]">Template Name</th>
                    <th className="px-4 py-3 font-medium w-32">Subject Code</th>
                    <th className="px-4 py-3 font-medium w-24 text-center">Semester</th>
                    <th className="px-4 py-3 font-medium w-24 text-center">Year</th>
                    <th className="px-4 py-3 font-medium w-24 text-center">Version</th>
                    <th className="px-4 py-3 font-medium w-40">Creator Name</th>
                    <th className="px-4 py-3 font-medium w-28">Publishable?</th>
                    <th className="px-4 py-3 font-medium w-44">Actions</th>
                  </tr>
                </thead>

                <tbody className="divide-y divide-gray-100">
                  {/* The table contents are filtered by what is in the search bar if it is being used */}
                  {latest.length === 0 && !loading && (
                    <tr>
                      {/* If the search query doesn't have a corresponding entry in the table,
                          we display a "not found" message */}
                      <td colSpan={10} className="px-4 py-6 text-center text-gray-500">
                        No {query ? "matching" : ""} templates{query ? " for your search." : " yet."}
                      </td>
                    </tr>
                  )}

                  {/* The contents of the table */}
                  {latest.map((tpl) => (
                    <tr key={tpl.templateId}>
                      <td className="px-4 py-3 truncate">{tpl.name}</td>
                      <td className="px-4 py-3">{tpl.subjectCode}</td>
                      <td className="px-4 py-3 text-center">{tpl.semester}</td>
                      <td className="px-4 py-3 text-center">{tpl.year}</td>
                      <td className="px-4 py-3 text-center">v{tpl.version}</td>
                      <td className="px-4 py-3">{tpl.ownerName || "NA"}</td>
                      <td className="px-4 py-3">{tpl.isPublishable ? "Yes" : "No"}</td>
                      <td className="px-4 py-3">
                        <div className="flex flex-wrap gap-2">
                          
                          {/* Edit the given template in the table */}
                          <button
                            className="px-3 py-1 rounded-lg border border-gray-300 hover:bg-gray-50"
                            onClick={(e) => {
                              e.stopPropagation();
                              router.push(`/templatebuilder?template_id=${tpl.templateId}`);
                            }}
                          >
                            Edit
                          </button>

                          {/* Delete the given template from the system */}
                          <button
                            className="px-3 py-1 rounded-lg text-red-600 border border-red-400 hover:bg-red-50 disabled:opacity-50"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDelete(tpl.templateId);
                            }}
                            disabled={deletingIds.has(tpl.templateId)}
                          >
                            {deletingIds.has(tpl.templateId) ? "Deleting…" : "Delete"}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </main>
        </div>
      </div>
    </div>
  );
}
